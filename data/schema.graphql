"""All input for the create `Drawing` mutation."""
input CreateDrawingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Drawing` to be created by this mutation."""
  drawing: DrawingInput!
}

"""The output of our create `Drawing` mutation."""
type CreateDrawingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Drawing` that was created by this mutation."""
  drawing: Drawing

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Drawing`. May be used by Relay 1."""
  drawingEdge(
    """The method to use when ordering `Drawing`."""
    orderBy: [DrawingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): DrawingsEdge
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""All input for the `deleteDrawingByMosaicId` mutation."""
input DeleteDrawingByMosaicIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  mosaicId: UUID!
}

"""All input for the `deleteDrawing` mutation."""
input DeleteDrawingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Drawing` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Drawing` mutation."""
type DeleteDrawingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Drawing` that was deleted by this mutation."""
  drawing: Drawing
  deletedDrawingId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Drawing`. May be used by Relay 1."""
  drawingEdge(
    """The method to use when ordering `Drawing`."""
    orderBy: [DrawingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): DrawingsEdge
}

type Drawing implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  mosaicId: UUID!
  width: Int!
  height: Int!
  name: String!
}

"""
A condition to be used against `Drawing` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input DrawingCondition {
  """Checks for equality with the object’s `mosaicId` field."""
  mosaicId: UUID

  """Checks for equality with the object’s `width` field."""
  width: Int

  """Checks for equality with the object’s `height` field."""
  height: Int

  """Checks for equality with the object’s `name` field."""
  name: String
}

"""An input for mutations affecting `Drawing`"""
input DrawingInput {
  mosaicId: UUID
  width: Int!
  height: Int!
  name: String!
}

"""
Represents an update to a `Drawing`. Fields that are set will be updated.
"""
input DrawingPatch {
  mosaicId: UUID
  width: Int
  height: Int
  name: String
}

"""A connection to a list of `Drawing` values."""
type DrawingsConnection {
  """A list of `Drawing` objects."""
  nodes: [Drawing]!

  """
  A list of edges which contains the `Drawing` and cursor to aid in pagination.
  """
  edges: [DrawingsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Drawing` you could get from the connection."""
  totalCount: Int!
}

"""A `Drawing` edge in the connection."""
type DrawingsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Drawing` at the end of the edge."""
  node: Drawing
}

"""Methods to use when ordering `Drawing`."""
enum DrawingsOrderBy {
  NATURAL
  MOSAIC_ID_ASC
  MOSAIC_ID_DESC
  WIDTH_ASC
  WIDTH_DESC
  HEIGHT_ASC
  HEIGHT_DESC
  NAME_ASC
  NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `Drawing`."""
  createDrawing(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateDrawingInput!
  ): CreateDrawingPayload

  """Updates a single `Drawing` using its globally unique id and a patch."""
  updateDrawing(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDrawingInput!
  ): UpdateDrawingPayload

  """Updates a single `Drawing` using a unique key and a patch."""
  updateDrawingByMosaicId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDrawingByMosaicIdInput!
  ): UpdateDrawingPayload

  """Deletes a single `Drawing` using its globally unique id."""
  deleteDrawing(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDrawingInput!
  ): DeleteDrawingPayload

  """Deletes a single `Drawing` using a unique key."""
  deleteDrawingByMosaicId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDrawingByMosaicIdInput!
  ): DeleteDrawingPayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads and enables pagination through a set of `Drawing`."""
  allDrawings(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Drawing`."""
    orderBy: [DrawingsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DrawingCondition
  ): DrawingsConnection
  drawingByMosaicId(mosaicId: UUID!): Drawing

  """Reads a single `Drawing` using its globally unique `ID`."""
  drawing(
    """The globally unique `ID` to be used in selecting a single `Drawing`."""
    nodeId: ID!
  ): Drawing
}

"""All input for the `updateDrawingByMosaicId` mutation."""
input UpdateDrawingByMosaicIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Drawing` being updated.
  """
  drawingPatch: DrawingPatch!
  mosaicId: UUID!
}

"""All input for the `updateDrawing` mutation."""
input UpdateDrawingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Drawing` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Drawing` being updated.
  """
  drawingPatch: DrawingPatch!
}

"""The output of our update `Drawing` mutation."""
type UpdateDrawingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Drawing` that was updated by this mutation."""
  drawing: Drawing

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Drawing`. May be used by Relay 1."""
  drawingEdge(
    """The method to use when ordering `Drawing`."""
    orderBy: [DrawingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): DrawingsEdge
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID
