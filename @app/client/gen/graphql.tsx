/* DO NOT EDIT! This file is auto-generated by graphql-code-generator - see `codegen.yml` */
import gql from 'graphql-tag';
import * as ApolloReactCommon from '@apollo/react-common';
import * as ApolloReactHooks from '@apollo/react-hooks';
export type Maybe<T> = T | null;

/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** A location in a connection that can be used for resuming pagination. */
  Cursor: any;
  /** A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122). */
  UUID: any;
};

/** All input for the create `Drawing` mutation. */
export type CreateDrawingInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Drawing` to be created by this mutation. */
  drawing: DrawingInput;
};

/** The output of our create `Drawing` mutation. */
export type CreateDrawingPayload = {
   __typename?: 'CreateDrawingPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Drawing` that was created by this mutation. */
  drawing?: Maybe<Drawing>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `Drawing`. May be used by Relay 1. */
  drawingEdge?: Maybe<DrawingsEdge>;
};


/** The output of our create `Drawing` mutation. */
export type CreateDrawingPayloadDrawingEdgeArgs = {
  orderBy?: Maybe<Array<DrawingsOrderBy>>;
};


/** All input for the `deleteDrawingByMosaicId` mutation. */
export type DeleteDrawingByMosaicIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  mosaicId: Scalars['UUID'];
};

/** All input for the `deleteDrawing` mutation. */
export type DeleteDrawingInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `Drawing` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The output of our delete `Drawing` mutation. */
export type DeleteDrawingPayload = {
   __typename?: 'DeleteDrawingPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Drawing` that was deleted by this mutation. */
  drawing?: Maybe<Drawing>;
  deletedDrawingId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `Drawing`. May be used by Relay 1. */
  drawingEdge?: Maybe<DrawingsEdge>;
};


/** The output of our delete `Drawing` mutation. */
export type DeleteDrawingPayloadDrawingEdgeArgs = {
  orderBy?: Maybe<Array<DrawingsOrderBy>>;
};

export type Drawing = Node & {
   __typename?: 'Drawing';
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  mosaicId: Scalars['UUID'];
  width: Scalars['Int'];
  height: Scalars['Int'];
  name: Scalars['String'];
};

/** A condition to be used against `Drawing` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type DrawingCondition = {
  /** Checks for equality with the object’s `mosaicId` field. */
  mosaicId?: Maybe<Scalars['UUID']>;
  /** Checks for equality with the object’s `width` field. */
  width?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `height` field. */
  height?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `name` field. */
  name?: Maybe<Scalars['String']>;
};

/** An input for mutations affecting `Drawing` */
export type DrawingInput = {
  mosaicId?: Maybe<Scalars['UUID']>;
  width: Scalars['Int'];
  height: Scalars['Int'];
  name: Scalars['String'];
};

/** Represents an update to a `Drawing`. Fields that are set will be updated. */
export type DrawingPatch = {
  mosaicId?: Maybe<Scalars['UUID']>;
  width?: Maybe<Scalars['Int']>;
  height?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
};

/** A connection to a list of `Drawing` values. */
export type DrawingsConnection = {
   __typename?: 'DrawingsConnection';
  /** A list of `Drawing` objects. */
  nodes: Array<Maybe<Drawing>>;
  /** A list of edges which contains the `Drawing` and cursor to aid in pagination. */
  edges: Array<DrawingsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Drawing` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `Drawing` edge in the connection. */
export type DrawingsEdge = {
   __typename?: 'DrawingsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `Drawing` at the end of the edge. */
  node?: Maybe<Drawing>;
};

/** Methods to use when ordering `Drawing`. */
export enum DrawingsOrderBy {
  Natural = 'NATURAL',
  MosaicIdAsc = 'MOSAIC_ID_ASC',
  MosaicIdDesc = 'MOSAIC_ID_DESC',
  WidthAsc = 'WIDTH_ASC',
  WidthDesc = 'WIDTH_DESC',
  HeightAsc = 'HEIGHT_ASC',
  HeightDesc = 'HEIGHT_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

/** The root mutation type which contains root level fields which mutate data. */
export type Mutation = {
   __typename?: 'Mutation';
  /** Creates a single `Drawing`. */
  createDrawing?: Maybe<CreateDrawingPayload>;
  /** Updates a single `Drawing` using its globally unique id and a patch. */
  updateDrawing?: Maybe<UpdateDrawingPayload>;
  /** Updates a single `Drawing` using a unique key and a patch. */
  updateDrawingByMosaicId?: Maybe<UpdateDrawingPayload>;
  /** Deletes a single `Drawing` using its globally unique id. */
  deleteDrawing?: Maybe<DeleteDrawingPayload>;
  /** Deletes a single `Drawing` using a unique key. */
  deleteDrawingByMosaicId?: Maybe<DeleteDrawingPayload>;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateDrawingArgs = {
  input: CreateDrawingInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateDrawingArgs = {
  input: UpdateDrawingInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateDrawingByMosaicIdArgs = {
  input: UpdateDrawingByMosaicIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteDrawingArgs = {
  input: DeleteDrawingInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteDrawingByMosaicIdArgs = {
  input: DeleteDrawingByMosaicIdInput;
};

/** An object with a globally unique `ID`. */
export type Node = {
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
};

/** Information about pagination in a connection. */
export type PageInfo = {
   __typename?: 'PageInfo';
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['Cursor']>;
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['Cursor']>;
};

/** The root query type which gives access points into the data universe. */
export type Query = Node & {
   __typename?: 'Query';
  /**
   * Exposes the root query type nested one level down. This is helpful for Relay 1
   * which can only query top level fields if they are in a particular form.
   */
  query: Query;
  /** The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`. */
  nodeId: Scalars['ID'];
  /** Fetches an object given its globally unique `ID`. */
  node?: Maybe<Node>;
  /** Reads and enables pagination through a set of `Drawing`. */
  allDrawings?: Maybe<DrawingsConnection>;
  drawingByMosaicId?: Maybe<Drawing>;
  /** Reads a single `Drawing` using its globally unique `ID`. */
  drawing?: Maybe<Drawing>;
};


/** The root query type which gives access points into the data universe. */
export type QueryNodeArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryAllDrawingsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<DrawingsOrderBy>>;
  condition?: Maybe<DrawingCondition>;
};


/** The root query type which gives access points into the data universe. */
export type QueryDrawingByMosaicIdArgs = {
  mosaicId: Scalars['UUID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryDrawingArgs = {
  nodeId: Scalars['ID'];
};

/** All input for the `updateDrawingByMosaicId` mutation. */
export type UpdateDrawingByMosaicIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `Drawing` being updated. */
  drawingPatch: DrawingPatch;
  mosaicId: Scalars['UUID'];
};

/** All input for the `updateDrawing` mutation. */
export type UpdateDrawingInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `Drawing` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `Drawing` being updated. */
  drawingPatch: DrawingPatch;
};

/** The output of our update `Drawing` mutation. */
export type UpdateDrawingPayload = {
   __typename?: 'UpdateDrawingPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Drawing` that was updated by this mutation. */
  drawing?: Maybe<Drawing>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `Drawing`. May be used by Relay 1. */
  drawingEdge?: Maybe<DrawingsEdge>;
};


/** The output of our update `Drawing` mutation. */
export type UpdateDrawingPayloadDrawingEdgeArgs = {
  orderBy?: Maybe<Array<DrawingsOrderBy>>;
};


export type GetDrawingsQueryVariables = {};


export type GetDrawingsQuery = (
  { __typename?: 'Query' }
  & { allDrawings?: Maybe<(
    { __typename?: 'DrawingsConnection' }
    & { pageInfo: (
      { __typename?: 'PageInfo' }
      & Pick<PageInfo, 'hasPreviousPage'>
    ) }
  )> }
);


export const GetDrawingsDocument = gql`
    query GetDrawings {
  allDrawings {
    pageInfo {
      hasPreviousPage
    }
  }
}
    `;

/**
 * __useGetDrawingsQuery__
 *
 * To run a query within a React component, call `useGetDrawingsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetDrawingsQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetDrawingsQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetDrawingsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetDrawingsQuery, GetDrawingsQueryVariables>) {
        return ApolloReactHooks.useQuery<GetDrawingsQuery, GetDrawingsQueryVariables>(GetDrawingsDocument, baseOptions);
      }
export function useGetDrawingsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetDrawingsQuery, GetDrawingsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetDrawingsQuery, GetDrawingsQueryVariables>(GetDrawingsDocument, baseOptions);
        }
export type GetDrawingsQueryHookResult = ReturnType<typeof useGetDrawingsQuery>;
export type GetDrawingsLazyQueryHookResult = ReturnType<typeof useGetDrawingsLazyQuery>;
export type GetDrawingsQueryResult = ApolloReactCommon.QueryResult<GetDrawingsQuery, GetDrawingsQueryVariables>;