import './config/env'
import express from 'express'

import { postgraphile, PostGraphileOptions, makePluginHook } from 'postgraphile'
import PgSimplifyInflectorPlugin from '@graphile-contrib/pg-simplify-inflector'
import PgPubsub from '@graphile/pg-pubsub'

const app = express()

const pluginHook = makePluginHook([PgPubsub])

const isDev = (process.env.NODE_ENV || 'development') === 'development'

const pgConfig = {
	host: process.env.DATABASE_HOST || 'localhost',
	port: Number(process.env.DATABASE_PORT) || 5432,
	user: process.env.DATABASE_OWNER,
	database: process.env.DATABASE_NAME,
	password: process.env.DATABASE_OWNER_PASSWORD,
}

// Your PostGraphile config:
// https://www.graphile.org/postgraphile/usage-library/#api-postgraphilepgconfig-schemaname-options
const postgraphileOptions: PostGraphileOptions = {
	pluginHook,
	subscriptions: true,
	simpleSubscriptions: true,
	enableCors: true,
	dynamicJson: true,
	graphiql: true,
	enhanceGraphiql: true,
	watchPg: isDev,
	ignoreRBAC: false,
	setofFunctionsContainNulls: false,
	appendPlugins: [
		// Simplifies the field names generated by PostGraphile.
		PgSimplifyInflectorPlugin,
	],
	graphileBuildOptions: {
		/*
		 * Any properties here are merged into the settings passed to each Graphile
		 * Engine plugin - useful for configuring how the plugins operate.
		 */

		// Makes all SQL function arguments except those with defaults non-nullable
		pgStrictFunctions: true,
	},
	// Keep data/schema.graphql up to date

	/* ... */
}

if (isDev) {
	postgraphileOptions.sortExport = true
	postgraphileOptions.exportGqlSchemaPath = '../../data/schema.graphql'
}
app.use(postgraphile(pgConfig, ['public', 'app_public'], postgraphileOptions))
app.use('/', (req, res, next) => {
	res.send('<marquee>Welcome to my PostGraphile server!</marquee>')
})
app.listen(Number(process.env.PORT) || 3000)
